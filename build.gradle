import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.8.20'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.20'
	id 'jacoco'
}

group = 'aero.airlab.challenge'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	maven {
		url = uri("https://repo.osgeo.org/repository/release")
	}
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

	implementation "org.geotools:gt-shapefile:${geotools_version}"
	implementation "org.geotools:gt-geojson:${geotools_version}"
	implementation "org.geotools:gt-epsg-hsql:${geotools_version}"
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
	implementation 'org.projectlombok:lombok:1.18.22'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "io.kotest:kotest-assertions-core:${kotest_version}"
	testImplementation 'junit:junit:4.13.1'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"src/main/kotlin/**",
					"aero/airlab/challenge/conflictforecast/geospatial/**",
					"aero/airlab/challenge/conflictforecast/api/**",
					"aero/airlab/challenge/conflictforecast/api/**",
					"aero/airlab/challenge/conflictforecast/util/RequestFileReader"
			])
		}))
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
